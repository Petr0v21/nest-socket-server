# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserDto {
  id: String!
  telegramId: String!
  username: String
  fullname: String!
  avatar: String
  balance: Float!
  exp: Float!
  level: Float!
  liga: LigaEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum LigaEnum {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserStatisticsDto {
  totalBets: Float!
  winningBets: Float!
  headsGames: Float!
  tailsGames: Float!
  highestPayout: Float!
  leaderboardPlace: Float
}

type SuccessOutput {
  success: Boolean!
}

type LeaderBoardRewardDto {
  id: String!
  order: Float!
  amount: Float!
  status: RewardStatus!
}

enum RewardStatus {
  SUCCESS
  ERROR
  PENDING
}

type LeaderDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float!
  userId: String!
  user: UserDto
  leaderBoardId: String
  rewardId: String
}

type LeaderBoardDto {
  id: String!
  startDate: DateTime!
  endDate: DateTime!
  status: String!
  rewards: [LeaderBoardRewardDto!]
  leaders: [LeaderDto!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BetDto {
  id: String!
  amount: Float!
  payout: Float!
}

type CoinFlipGameDto {
  id: String!
  isWon: Boolean!
  sideSelected: String!
  sideResult: String!
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GameDto {
  id: String!
  isWon: Boolean!
  sideSelected: String!
  sideResult: String!
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  User: UserDto!
  bet: BetDto!
}

type CoinFlipBetGameDto {
  id: String!
  amount: Float!
  payout: Float!
  game: CoinFlipGameDto!
}

type ActualDetailsDto {
  games: [GameDto!]!
  ratioSides: [Int!]!
}

type ActiveClientsDto {
  activeCliets: Int!
}

type Query {
  getMe: UserDto!
  getMyStatistics: UserStatisticsDto!
  getLeaderBoard(take: Float, skip: Float): LeaderBoardDto!
  getActualDetails: ActualDetailsDto!
  validateTelegramHash(query: String!): SuccessOutput!
  getActiveClients: ActiveClientsDto!
}

type Mutation {
  createLeaderBoard(status: LeaderBoardStatus, startDate: DateTime!, endDate: DateTime!, rewards: [CreateLeaderBoardRewardArgs!]): SuccessOutput!
  updateLeaderBoard(status: LeaderBoardStatus, startDate: DateTime, endDate: DateTime, id: String!, rewards: [UpdateLeaderBoardRewardArgs!]): SuccessOutput!
  deleteLeaderBoard(id: String!): SuccessOutput!
  play(bet: Float!, side: CoinSide!): CoinFlipBetGameDto!
}

enum LeaderBoardStatus {
  CLOSED
  ACTIVE
  PENDING
}

input CreateLeaderBoardRewardArgs {
  order: Float!
  amount: Float!
}

input UpdateLeaderBoardRewardArgs {
  order: Float
  amount: Float
  id: String
  status: RewardStatus
  leaderId: String
}

enum CoinSide {
  HEADS
  TAILS
}